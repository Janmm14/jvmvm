{"name":"JvmVM","tagline":"Fork of JauVM - JVM stack emulator in Java","body":"### A Java VM on top of JVM.\r\nTarget of this project is to create sandbox for user java code execution\r\nwith control over instructions and save/load running program.\r\n\r\nTo run VM you just need to create and compile project:\r\n```java\r\nProject project = new Project(\"Name\")\r\n    .addFiles(mapWithFileNamesAsKeysAndTheirContentsAsValues)\r\n    .addSystemClasses(listOfSystemClassesThatYouAllowToUseInVm)\r\n    .compile()\r\n    .setupVM(\"pkg.ClassName\", \"methodName\");\r\n```\r\nThis will start execution of static method on given class.\r\n\r\nTo execute methods on objects you can add synthetic class:\r\n```java\r\nProject project = new Project(\"Method call example\")\r\n    .addFiles(mapWithFileNamesAsKeysAndTheirContentsAsValues)\r\n    .addSynthetic(\"Boot\", \"return new TestClass(myArg).callMethod(param1, anotherParam);\")\r\n    .addArgument(\"myArg\", \"Some String\")\r\n    .addArgument(\"param1\", new ClassAddedAsSystemClass())\r\n    .addArgument(\"anotherParam\", null)\r\n    .addSystemClasses(listOfSystemClassesThatYouAllowToUseInVm)\r\n    .compile()\r\n    .setupVM(\"Boot\");\r\n```\r\n\r\nJvmVM virtualizes jvm stack and instructions execution for given code.\r\nAnd then you can execute instructions:\r\n```java\r\nwhile (project.isActive()) {\r\n    project.step();\r\n}\r\nObject result = project.getResult();\r\n```\r\n\r\nor to execute until return:\r\n```java\r\nObject result = project.run();\r\n```\r\n\r\n### Breakpoints\r\nYou can manage breakpoints to stop execution at needed point:\r\n```java\r\nproject.setBreakpoint(\"pkg/ClassName.java\", 15);\r\nproject.setBreakpoint(\"pkg.ClassName\", \"methodName\");\r\nproject.removeBreakpoint(\"pkg/ClassName.java\", 20);\r\ntry{\r\n    Object result = project.run();\r\n} catch(ProjectBreakpointException e) {\r\n    // ...\r\n}\r\nproject.clearBreakpoints();\r\n```\r\n\r\n### Data manipulation\r\nVM has ability to mainpulate values of static objects and in stack:\r\n```java\r\nint x = project.getLocalVariable(\"x\");\r\nproject.setLocalVariable(\"x\", x + 1);\r\n\r\nObject obj = project.getStaticField(\"pkg.ClassName\", \"fieldName\");\r\nproject.setStaticField(\"pkg.ClassName\", \"fieldName\", obj2);\r\n```\r\n\r\n### Save / Load\r\nExecuted programs must use only serializable system classes for ability of VM serialization.\r\nUser classes made serializable by classloader.\r\n\r\n```java\r\nbyte[] serializedProject = project.saveToBytes();\r\nProject restoredProject = Project.fromBytes(serializedProject);\r\nrestoredProject.run();\r\n```\r\nYou can continue running restored project as if it is a new separate project, stopped at same point as original.\r\n\r\n\r\n### In Development\r\nProject is in alpha and contains bugs, undocumented features and documentation for unwritten features.\r\nSee tests http://git.io/4hc3tA and source code http://git.io/V6UvpA.\r\n\r\n### Authors and Contributors\r\nOriginal project is JauVM - http://jauvm.blogspot.ru/.\r\nTo achieve full functionality original classes were modified\r\nand additional utilities were added.\r\n\r\n### Support or Contact\r\nContact me: vladimir.p.polyakov@gmail.com.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}