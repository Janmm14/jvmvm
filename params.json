{"name":"JvmVM","tagline":"Fork of JauVM - JVM stack emulator in Java","body":"### A Java VM on top of JVM.\r\nTarget of this project is to create sandbox for user java code execution\r\nwith control over instructions and save/load running program.\r\n\r\nTo run VM you just need to create and compile project:\r\n```\r\nProject project = new Project(\"Program1\")\r\n    .addFiles(mapWithFileNamesAsKeysAndTheirContentsAsValues)\r\n    .addSystemClasses(listOfSystemClassesThatYouAllowToUseInVm)\r\n    .compile()\r\n    .startVM(\"pkg.ClassName\", \"methodName\", null, new Class[0], new Object[0]);\r\n```\r\n\r\nJvmVM virtualizes jvm stack and instructions execution for given code.\r\n\r\n```\r\ntry {\r\n  while (true) {\r\n    project.step();\r\n  }\r\n} catch (ProjectStoppedException e) {\r\n  Object result = e.getResult();\r\n}\r\n```\r\n\r\n### Save / Load\r\nExecuted programs must use only serializable system classes for ability of VM serialization.\r\nUser classes made serializable by classloader.\r\n\r\n```\r\nbyte[] serializedProject = project.saveToBytes();\r\nProject restoredProject = Project.fromBytes(serializedProject);\r\n```\r\nYou can continue running restored project as if it is a new separate project, stopped at same point as original.\r\n\r\n\r\n### In Development\r\nProject is still in alpha and contains bugs and hidden features.\r\nSee tests https://github.com/drxaos/JvmVM/tree/master/src/test/java/com/googlecode/jvmvm/tests\r\nand source code https://github.com/drxaos/JvmVM/tree/master/src/main/java/com/googlecode/jvmvm.\r\n\r\n### Authors and Contributors\r\nOriginal project is JauVM - http://jauvm.blogspot.ru/.\r\nTo achieve full functionality original classes were modified\r\nand additional utilities were added.\r\n\r\n### Support or Contact\r\nContact me: vladimir.p.polyakov@gmail.com.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}